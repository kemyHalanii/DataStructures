Algorithms for searching using BinarySearch in sorted array. 

1) 	Ceiling for given value in a sorted array
	
		compare arr[mid] with n
		if arr[mid] == n you have the answer
		if arr[mid] > n, set ceiling = arr[mid] & j = mid -1; continue;
		if arr[mid] < n, i = mid +1; continue;
		return ceiling.
	
2) 	Floor for a given value in a sorted array

		compare arr[mid] with n
		if arr[mid]== n you have the answer.
		if arr[mid] > n, j = mid -1; continue;
		if arr[mid] < n, floor = arr[mid] ;i = mid +1; continue;
		return floor.
	
3)	Fixedpoint in a sorted array. i.e. value = index

		compare arr[mid] with mid.
		if arr[mid]== mid you have the answer.
		if arr[mid] > mid, j = mid -1; continue;
		if arr[mid] < mid, i = mid +1; continue;
		return mid
		
4)	Frequency of a number in a sorted array.
	
		find first occurence of number
			arr[mid] == n && arr[mid] != arr[mid - 1]; f = mid;
			arr[mid] == n; j = mid - 1;
			arr[mid] > n ; j = mid - 1;
			arr[mid] < n ; j = mid + 1;
			
		if f = -1; n not present;
		
		find last occurence between f and j
			arr[mid] == n && arr[mid] != arr[mid + 1]; l = mid;
			arr[mid] == n; i = mid + 1;
			arr[mid] > n ; i = mid + 1;
			arr[mid] < n ; j = mid - 1;
			
		freq = l - f + 1;
		
5)	Max in asc + desc array

		mid == i; max = arr[mid];
		arr[mid] > arr[mid+1]; j = mid - 1;
		arr[mid] < arr[mid+1]; i = mid + 1;
		arr[mid] > arr[mid-1]; i = mid + 1;
		arr[mid] < arr[mid-1]; j = mid - 1;
		
6)	Min in rotated sorted array

		i == j; min = arr[i];
		arr[mid] > arr[j]; i = mid +1;
		arr[mid] < arr[j]; j = mid;

7)	Missing number in sorted array

		if arr[mid] == mid; i = mid + 1;
		if arr[mid] != mid && (arr[mid-1] == mid -1 || mid == i); mn = mid;
		if arr[mid] != mid; j = mid -1;
		
8)	Peak Element in an any array

		if (mid == i); peak = arr[mid]; 
		if arr[mid] > arr[mid -1] && arr[mid] > arr[mid + 1]; peak = arr[mid];
		if arr[mid] > arr[mid - 1]; i = mid + 1;
		if arr[mid] > arr[mid + 1]; j = mid - 1;
	
9)	Search an element in rotated sorted array
	
		if arr[mid] == n; val = mid;
		if(arr[mid] > arr[i]);
			if(arr[mid] > n); i = mid + 1;
			else j = mid -1;
		if(arr[mid] < arr[i])
			if(arr[mid] > n); j = mid - 1;
			else i = mid +1;
			
10)	Find smallest and 2ndsmallest in an array; Time complexity - O(n)

		last and secondlast = Integer.Max
		if arr[i] < last; secondlast = last; last = arr[i];
		if arr[i] < secondlast; secondlast = arr[i]
	
11) Sum of pair in an array closest to given number n
	
		sort the array; i = 0; j = arr.length- 1; minDis = Integer.Max;
		if Math.abs(arr[i] + arr[j] - n) < minDis; minDis = arr[i] + arr[j] - n; pair = i , j; 
		if arr[i] + arr[j] - n > 0; j--;
		else i++;