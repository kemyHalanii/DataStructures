Threads

1) Thread Pool

	create a class ThreadPool has 3 parameters
		1) poolsize or num of threads, int nPoolSize;
		2) Array of WorkerThreads, WorkerThreads[] pool;
		3) a LinkedBlockingQueue queue that stores the tasks to processed.
		4) private innerclass WorkerThread that extends Thread
			override the run method
				Have a local instance of runnable task.
				in an infinite loop, while(true)
					synchronize over(queue)
						try catch - wait over queue if its empty or not
						task = queue.poll
					task.run()
		
		constructors () & (int size)
			initialize poolsize.
			initialize WorkerThreads array size.
			initialize LinkedBlockingQueue queue.
			initialize each WorkerThread in array and start the thread.
			
		execute(Runnable task) 
			synchronize over queue 
				add task to queue
				notify over queue
				
		execute(Runnable[] tasks)
		Arrays.Stream(tasks).forEach(t -> execute(t))