Stack


stack 
	T[] array;
	int top;
	Stack(int size)
		array = new array[size];
		top = 0;
		
push(T t)
	array[top] = t;
	top++;
	
pop()
	top--;
	T t = array[top];
	array[top] = null;
	return t;

peek()
	return array[top];

size()
	retrun top;

isEmpty()
	return top == 0;
	
	
	
1) reverse stack O(n2)

	until stack is empty, pop an element t from stack, 
	 recursively call.
	 insert t at bottom of stack.
	 
	 insertAtBottom
	 	if(stack.isempty)	stack.push(t);return
	 	T temp = stack.pop();
	 	insertatbottom(stack, t)
	 	stack.push(temp);
	 	
2) Sort stack O(n2)

	until stack is empty, pop an element t from stack, 
	 recursively call.
	 sort stack by adding element t
	 
	 sort
	 if(stack.isEmpty()) stack.push(t);
	 else
	 	i = stack.peek();
	 	if(t > i) stack.push(t);
	 	else
	 		stack.pop();
	 		sort(stack, t);
	 		stack.push(i);
	 	
3) Stock Span O(n) // Dynamic Programming

	Create an array for span and a stack
	for each element in array
		while (check if stack not empty and arr[i] > arr[stack top]) pop stack
			
			if(stack is empty) p = -1;
			else p =stack.peek();
			
		span[i] = i - p;
		add i to stack 
	return span;
	
4) Queue using 2 stack

	always add to s1
	if(s2 is empty) s2.push(s1.pop())	
	always return from s2 i.e s2.pop(). 

5) Largest rectangle under histogram

	maxArea = 0;
	int i = 0;
	while(i < arr.length)
		if(arr[i ] > arr[stack.peek()]) stack.push(i++)
		else
			// calc maxArea for each bar greater than bar at i and set maxArea.
			int top = stack.top;
			maxArea = Math.max(maxArea, arr[top]*(stacl.isEmpty(): i ? i -top)) 
	
	//if stack is still not empty
	while(!stack.isEmpty())
		int top = stack.top;
		maxArea = Math.max(maxArea, arr[top]*(stacl.isEmpty(): i ? i -top))
	return maxArea